import express from "express";
import mongo from "../mongo.js";
import { parseBuffer } from "music-metadata";
import { getAudioPeaks } from "../audio.js";
import multer from "multer";
import { v4 as uuidv4 } from 'uuid';

const fileFilter = (req, file, cb) => {
    if (file.fieldname === 'podcast') {
        // Allow audio files
        if (file.mimetype.startsWith('audio/')) {
            cb(null, true);
        } else {
            cb(new Error('Invalid audio file type'), false);
        }
    } else if (file.fieldname === 'cover') {
        // Allow image files
        if (file.mimetype.startsWith('image/')) {
            cb(null, true);
        } else {
            cb(new Error('Invalid image file type'), false);
        }
    } else {
        cb(new Error('Unexpected field'), false);
    }
};

// Configure multer for multiple fields
const upload = multer({
    fileFilter: fileFilter,
    limits: {
        fileSize: 100 * 1024 * 1024, // 100MB limit for podcasts
        files: 2 // Allow max 2 files (1 podcast + 1 cover)
    }
}).fields([
    { name: 'podcast', maxCount: 1 },
    { name: 'cover', maxCount: 1 }
]);

const router = express.Router();

router.get("/", async (req, res) => {
    try {
        const podcasts = await mongo.getPodcastsMeta();
        res.status(200).send(podcasts);
    } catch (error) {
        res.status(500).send({ message: "Server error", error });
    }
});

router.get("/:podcastId", async (req, res) => {
    try {
        const podcastId = req.params.podcastId;
        const podcast = await mongo.getPodcastById(podcastId);
        if (!podcast) {
            return res.status(404).send({ message: "Podcast not found" });
        }
        res.status(200).send(podcast);
    } catch (error) {
        res.status(500).send({ message: "Server error", error });
    }
});

router.get("/:podcastId/cover", async (req, res) => {
    try {
        const podcastId = req.params.podcastId;

        if (!podcastId) {
            return res.status(400).send({ message: "Podcast ID is required" });
        }

        const podcast = await mongo.getPodcastById(podcastId);
        if (!podcast || !podcast.coverId) {
            return res.status(404).send({ message: "Cover not found" });
        }

        const coverStream = mongo.getCoverFromId(podcast.coverId);

        coverStream.on('error', (streamError) => {
            console.error('Streaming error:', streamError);
            res.status(500).send({ message: "Error streaming cover", error: streamError.message });
        });

        coverStream.pipe(res);
    } catch (error) {
        console.error('Cover retrieval error:', error);
        res.status(500).send({
            message: "Failed to retrieve cover",
            error: error.message || "Unknown error occurred"
        });
    }
});

router.get("/:podcastId/audio", async (req, res) => {
    try {
        const podcastId = req.params.podcastId;

        if (!podcastId) {
            return res.status(400).send({ message: "Podcast ID is required" });
        }

        const podcast = await mongo.getPodcastById(podcastId);
        if (!podcast || !podcast.audioId) {
            return res.status(404).send({ message: "Audio not found" });
        }

        const audioStream = mongo.getAudioStreamFromId(podcast.audioId);

        audioStream.on('error', (streamError) => {
            console.error('Streaming error:', streamError);
            res.status(500).send({ message: "Error streaming audio", error: streamError.message });
        });

        audioStream.pipe(res);
    } catch (error) {
        console.error('Audio retrieval error:', error);
        res.status(500).send({
            message: "Failed to retrieve audio",
            error: error.message || "Unknown error occurred"
        });
    }
});

/**
 * @param {Object} req The request object it should contain
 *     title: String,
 *     id: String,
 *     link: String,
 *     description: String,
 *     content: String,
 *     date: Date,
 *     audioUrl: String, Auto generated by multer
 *     coverUrl: String, Auto generated by multer
 *     image: String,
 *     length: Number,
 *     number : Number, Which episode is it
 *     size: Number, Auto generated by multer
 *     peaks: [Number]
 *     authors: [{ name: String }]
 */
router.post("/", (req, res) => {
    upload(req, res, async (err) => {
        if (err) {
            console.error('Multer error:', err);
            return res.status(500).json({
                error: 'File upload failed',
                details: err.message
            });
        }

        try {
            const podcastFile = req.files['podcast'][0];
            const coverFile = req.files['cover'] ? req.files['cover'][0] : null;

            const metaData = await parseBuffer(podcastFile.buffer);
            const audioPeaks = await getAudioPeaks(podcastFile.buffer);
            const idAudio = await mongo.uploadPodcastAudio(podcastFile.buffer, podcastFile.originalname);
            let idImage;
            if (coverFile || metaData.common.picture[0].data) {
                idImage = await mongo.uploadPodcastCover(coverFile ? coverFile.buffer : metaData.common.picture[0].data);
            }

            const podcastId = uuidv4();

            const podcastMeta = {
                _id: podcastId,
                title: req.body.title,
                audioId: idAudio,
                coverId: idImage,
                audioUrl: `podcasts/${podcastId}/audio`,
                coverUrl: `podcasts/${podcastId}/cover`,
                description: req.body.description,
                number: req.body.number,
                content: req.body.content,
                date: req.body.date,
                length: req.body.length,
                size: podcastFile.size,
                peaks: audioPeaks,
                authors: req.body.authors
            };

            await mongo.uploadPodcastMeta(podcastMeta);

            if (!podcastFile || !metaData) {
                return res.status(400).json({
                    error: "Missing file or metadata"
                });
            }

            res.status(200).json({
                message: "Upload successful",
                file: podcastFile.originalname
            });

        } catch (error) {
            console.error('Processing error:', error);
            res.status(500).json({
                error: 'Server error',
                details: error.message
            });
        }
    });
});

export default router;