const express = require("express");
const mongo = require("../mongo");
const multer = require("multer");
const path = require("path");

// Define storage configuration
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadFolder = path.join(__dirname, "../uploads"); // Set the destination folder
        cb(null, uploadFolder);
    },
    filename: (req, file, cb) => {
        cb(null, file.originalname);
    },
});

const upload = multer({ storage: storage }).single('podcast'); // Pass storage to multer

const router = express.Router();

router.get("/:podcastId", async (req, res) => {
    try {
        const podcastId = req.params.podcastId;
        const podcast = await mongo.getPodcastByTitle(podcastId);
        if (!podcast) {
            return res.status(404).send({ message: "Podcast not found" });
        }
        res.status(200).send(podcast);
    } catch (error) {
        res.status(500).send({ message: "Server error", error });
    }
});

/**
 * @param {Object} req The request object it should contain
 *     title: String,
 *     id: String,
 *     link: String,
 *     description: String,
 *     content: String,
 *     date: Date,
 *     audioUrl: String, Auto generated by multer
 *     image: String,
 *     length: Number,
 *     size: Number, Auto generated by multer
 *     peaks: [Number]
 *     authors: [{ name: String }]
 */
router.post("/", (req, res,) => {
    upload(req, res, (err) => {
        if (err) {
            console.error('Multer error:', err);
        }

        try {
            const fileData = req.file;
            const metaData = req.body;

            if (!fileData || !metaData) {
                return res.status(400).send({ message: "Missing file or metadata" });
            }

        } catch (error) {
            console.error(error);
        }
    });
});

module.exports = router;