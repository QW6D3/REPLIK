import express from "express";
import mongo from "../mongo.js";
import { parseBuffer } from "music-metadata";
import { getAudioPeaks } from "../audio.js";
import multer from "multer";


const upload = multer().single('podcast'); // Pass storage to multer

const router = express.Router();

router.get("/", async (req, res) => {
    try {
        const podcasts = await mongo.getPodcastsMeta();
        res.status(200).send(podcasts);
    } catch (error) {
        res.status(500).send({ message: "Server error", error });
    }
});

router.get("/:podcastTitle", async (req, res) => {
    try {
        const podcastTitle = req.params.podcastTitle;
        const podcast = await mongo.getPodcastByTitle(podcastTitle);
        if (!podcast) {
            return res.status(404).send({ message: "Podcast not found" });
        }
        res.status(200).send(podcast);
    } catch (error) {
        res.status(500).send({ message: "Server error", error });
    }
});

router.get("/audio/:audioId", async (req, res) => {
    try {
        const audioId = req.params.audioId;

        // Validate audioId
        if (!audioId) {
            return res.status(400).send({ message: "Audio ID is required" });
        }

        // Get audio stream
        const audioStream = await mongo.getAudioStreamFromId(audioId);

        // Check if audio exists
        if (!audioStream) {
            return res.status(404).send({ message: "Audio not found" });
        }

        // Handle streaming errors
        audioStream.on('error', (streamError) => {
            console.error('Streaming error:', streamError);
            res.status(500).send({ message: "Error streaming audio", error: streamError.message });
        });

        audioStream.pipe(res);
    } catch (error) {
        console.error('Audio retrieval error:', error);
        res.status(500).send({
            message: "Failed to retrieve audio",
            error: error.message || "Unknown error occurred"
        });
    }
});

/**
 * @param {Object} req The request object it should contain
 *     title: String,
 *     id: String,
 *     link: String,
 *     description: String,
 *     content: String,
 *     date: Date,
 *     audioUrl: String, Auto generated by multer
 *     image: String,
 *     length: Number,
 *     size: Number, Auto generated by multer
 *     peaks: [Number]
 *     authors: [{ name: String }]
 */
router.post("/", (req, res) => {
    upload(req, res, async (err) => {
        if (err) {
            console.error('Multer error:', err);
            return res.status(500).json({
                error: 'File upload failed',
                details: err.message
            });
        }

        try {
            const fileData = req.file;

            const metaData = await parseBuffer(fileData.buffer)
            const audioPeaks = await getAudioPeaks(fileData.buffer);
            const idAudio = await mongo.uploadPodcastAudio(fileData.buffer, fileData.originalname);

            console.log(metaData);
            console.log(audioPeaks);


            const podcastMeta = {
                title: req.body.title,
                id: req.body.id,
                audioUrl: `audio/${idAudio}`,
                description: req.body.description,
                content: req.body.content,
                date: req.body.date,
                image: req.body.image,
                length: req.body.length,
                size: fileData.size,
                peaks: audioPeaks,
                authors: req.body.authors
            };

            await mongo.uploadPodcastMeta(podcastMeta);




            if (!fileData || !metaData) {
                return res.status(400).json({
                    error: "Missing file or metadata"
                });
            }


            res.status(200).json({
                message: "Upload successful",
                file: fileData.originalname
            });

        } catch (error) {
            console.error('Processing error:', error);
            res.status(500).json({
                error: 'Server error',
                details: error.message
            });
        }
    });
});

export default router;